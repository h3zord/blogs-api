{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Blogs API",
    "description": "Esta documentação é destinada ao projeto Blogs API."
  },
  "host": "blogs-api.up.railway.app",
  "basePath": "/",
  "tags": [
    {
      "name": "Login",
      "description": "Endpoints"
    },
    {
      "name": "User",
      "description": "Endpoints"
    },
    {
      "name": "Category",
      "description": "Endpoints"
    },
    {
      "name": "Post",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Realizar o login com email e senha e em seguida gerar um token",
        "description": "Endpoint para consultar se o email e a senha fornecidos coincidem com o cadastrado no banco de dados.",
        "parameters": [
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para realizar o login.",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para realizar o login efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/ValidToken"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/InvalidFieldsBodyError"
            },
            "description": "Erro! A requisição falhou! O email ou a senha informados estão incorretos."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/BodyNotFoundError"
            },
            "description": "Erro! A requisição falhou! Os campos devem estar todos preenchidos corretamente."
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Criar um novo usuário e gerar um token",
        "description": "Endpoint para criar um novo usuário e cadastrar as informações no banco de dados, e em seguida gerar um token.",
        "parameters": [
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para criar um novo usuário.",
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Requisição para criar um novo usuário efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/ValidToken"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/InvalidFieldsBodyError"
            },
            "description": "Erro! A requisição falhou! Os campos estão ausentes ou preenchidos incorretamente."
          },
          "409": {
            "schema": {
              "$ref": "#/definitions/InvalidEmailError"
            },
            "description": "Erro! A requisição falhou! O email informado já está cadastrado no banco de dados."
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Listar todos os usuários",
        "description": "Endpoint para listar todos os usuários cadastrados no banco de dados.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para criar um novo usuário.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para listar todos os usuários efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Buscar um usuário pelo seu ID",
        "description": "Endpoint para buscar um usuário cadastrado no banco de dados pelo seu ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID necessário para buscar um usuário cadastrado no banco de dados."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para buscar um usuário pelo seu ID.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para listar o usuário pelo seu ID efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/UserDoesNotExistError"
            },
            "description": "Erro! A requisição falhou! O usuário não existe no banco de dados."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletar um usuário buscando pelo seu ID",
        "description": "Endpoint para deletar um usuário cadastrado no banco de dados buscando pelo seu ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID necessário para deletar um usuário cadastrado no banco de dados."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para deletar um usuário pelo seu ID.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          }
        ],
        "responses": {
          "204": {
            "description": "Requisição para deletar um usuário buscando pelo seu ID efetuada com sucesso!"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/UserDeleteError"
            },
            "description": "Erro! A requisição falhou! Verifique se o usuário a ser excluído existe no banco de dados."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Criar uma nova categoria",
        "description": "Endpoint para criar uma nova categoria e cadastrar as informações no banco de dados.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para criar uma nova categoria.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          },
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para criar uma nova categoria.",
            "schema": {
              "$ref": "#/definitions/CreateCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Requisição para criar uma nova categoria efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/CreateCategory"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/InvalidFieldsBodyError"
            },
            "description": "Erro! A requisição falhou! Os campos estão ausentes ou preenchidos incorretamente."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      },
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Listar todas as categorias",
        "description": "Endpoint para listar todas as categorias cadastradas no banco de dados.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para listar todas as categorias.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para listar todas as categorias efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/CategoryList"
            }
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      }
    },
    "/post": {
      "post": {
        "tags": [
          "Post"
        ],
        "summary": "Criar um novo post",
        "description": "Endpoint para criar um novo post e cadastrar as informações no banco de dados.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para criar uma novo post.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          },
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para criar um post.",
            "schema": {
              "$ref": "#/definitions/CreatePost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Requisição para criar um post efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/CreatedPost"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BodyNotFoundError"
            },
            "description": "Erro! A requisição falhou! Os campos estão ausentes ou preenchidos incorretamente."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/CategoryNotFoundError"
            },
            "description": "Erro! A requisição falhou! Uma ou mais categorias são inválidas."
          }
        }
      },
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Listar todos os posts",
        "description": "Endpoint para listar todos os posts cadastrados no banco de dados.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para listar todos os posts.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para listar todos os posts efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      }
    },
    "/post/search": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Buscar todos os posts filtradas pela query",
        "description": "Endpoint para buscar todos os posts cadastrados no banco de dados que contenham em seu título ou conteúdo a palavra fornecida pela query.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para listar os posts por uma query.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string",
            "default": "Ano",
            "required": true,
            "description": "Digite uma palavra para servir de filtro de busca."
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para buscar um post pelo título ou conteúdo efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/PostDoesNotExistError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      }
    },
    "/post/{id}": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Buscar um post pelo seu ID",
        "description": "Endpoint para buscar um post cadastrado no banco de dados pelo seu ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID necessário para buscar o post cadastrado no banco de dados."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para buscar um post pelo seu ID.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para buscar um post pelo seu ID efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/PostObject"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/PostDoesNotExistError"
            },
            "description": "Erro! A requisição falhou! Não foi encontrado nenhum post cadastrado no banco de dados com esse ID."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      },
      "put": {
        "tags": [
          "Post"
        ],
        "summary": "Atualizar um post buscando pelo seu ID",
        "description": "Endpoint para atualizar um post cadastrado no banco de dados buscando pelo seu ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID necessário para atualizar o post cadastrado no banco de dados."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para atualizar um post pelo seu ID.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          },
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para atualizar um post.",
            "schema": {
              "$ref": "#/definitions/UpdatePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição para atualizar um post pelo seu ID efetuada com sucesso!",
            "schema": {
              "$ref": "#/definitions/UpdatedPost"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BodyNotFoundError"
            },
            "description": "Erro! A requisição falhou! Os campos estão ausentes ou preenchidos incorretamente."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          },
          "409": {
            "schema": {
              "$ref": "#/definitions/UnauthorizedUserError"
            },
            "description": "Erro! A requisição falhou! Apenas o autor do post tem permissão para atualizar."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/PostDoesNotExistError"
            },
            "description": "Erro! A requisição falhou! Não foi encontrado nenhum post cadastrado no banco de dados com esse ID."
          }
        }
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "summary": "Deletar um post buscando pelo seu ID",
        "description": "Endpoint para deletar um post cadastrado no banco de dados buscando pelo seu ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID necessário para deletar o post cadastrado no banco de dados."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para deletar um post pelo seu ID.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MjU2Mzc4LCJleHAiOjI1NDExNjk5Nzh9.zQsfHi3KRyF_jjzLq9rMGm3kMxzpbiQGsHE3Dr5IPi4"
          }
        ],
        "responses": {
          "204": {
            "description": "Requisição para deletar um post pelo seu ID efetuada com sucesso!"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          },
          "409": {
            "schema": {
              "$ref": "#/definitions/UnauthorizedUserError"
            },
            "description": "Erro! A requisição falhou! Apenas o autor do post tem permissão para deletar."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/PostDoesNotExistError"
            },
            "description": "Erro! A requisição falhou! Não foi encontrado nenhum post cadastrado no banco de dados com esse ID."
          }
        }
      }
    }
  },
  "definitions": {
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "lewishamilton@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "email": {
          "type": "string",
          "example": "lewishamilton@gmail.com"
        },
        "displayName": {
          "type": "string",
          "example": "Lewis Hamilton"
        },
        "image": {
          "type": "string",
          "example": "https://upload.wikimedia.org/wikipedia/commons/1/18/Lewis_Hamilton_2016_Malaysia_2.jpg"
        }
      }
    },
    "CreateUser": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Cristiano Ronaldo"
        },
        "email": {
          "type": "string",
          "example": "test@test.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        },
        "image": {
          "type": "string",
          "example": "https://pt.wikipedia.org/wiki/Cristiano_Ronaldo#/media/Ficheiro:Cristiano_Ronaldo_WC2022_-_01.jpg"
        }
      }
    },
    "UserList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "lewishamilton@gmail.com"
          },
          "displayName": {
            "type": "string",
            "example": "Lewis Hamilton"
          },
          "image": {
            "type": "string",
            "example": "https://upload.wikimedia.org/wikipedia/commons/1/18/Lewis_Hamilton_2016_Malaysia_2.jpg"
          }
        }
      }
    },
    "CreateCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Tecnologia"
        }
      }
    },
    "CategoryList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tecnologia"
          }
        }
      }
    },
    "CreatePost": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Lorem Ipsum"
        },
        "content": {
          "type": "string",
          "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        },
        "categoryIds": {
          "type": "array",
          "example": [
            1
          ],
          "items": {
            "type": "number"
          }
        }
      }
    },
    "CreatedPost": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Lorem Ipsum"
        },
        "content": {
          "type": "string",
          "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        },
        "userId": {
          "type": "number",
          "example": 1
        },
        "updated": {
          "type": "string",
          "example": "2023-02-27T18:07:13.105Z"
        },
        "published": {
          "type": "string",
          "example": "2023-02-27T18:07:13.105Z"
        }
      }
    },
    "UpdatePost": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Lorem Ipsum"
        },
        "content": {
          "type": "string",
          "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        }
      }
    },
    "UpdatedPost": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "number",
          "example": 1
        },
        "title": {
          "type": "string",
          "example": "Lorem Ipsum"
        },
        "content": {
          "type": "string",
          "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        },
        "published": {
          "type": "string",
          "example": "2011-08-01T19:58:00.000Z"
        },
        "updated": {
          "type": "string",
          "example": "2011-08-01T19:58:51.000Z"
        },
        "user_id": {
          "type": "number",
          "example": 1
        },
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "lewishamilton@gmail.com"
            },
            "displayName": {
              "type": "string",
              "example": "Lewis Hamilton"
            },
            "image": {
              "type": "string",
              "example": "https://upload.wikimedia.org/wikipedia/commons/1/18/Lewis_Hamilton_2016_Malaysia_2.jpg"
            }
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Inovação"
              }
            }
          }
        }
      }
    },
    "PostObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "userId": {
          "type": "number",
          "example": 1
        },
        "title": {
          "type": "string",
          "example": "Post do Ano"
        },
        "content": {
          "type": "string",
          "example": "Melhor post do ano"
        },
        "published": {
          "type": "string",
          "example": "2011-08-01T19:58:00.000Z"
        },
        "updated": {
          "type": "string",
          "example": "2011-08-01T19:58:51.000Z"
        },
        "user_id": {
          "type": "number",
          "example": 1
        },
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "lewishamilton@gmail.com"
            },
            "displayName": {
              "type": "string",
              "example": "Lewis Hamilton"
            },
            "image": {
              "type": "string",
              "example": "https://upload.wikimedia.org/wikipedia/commons/1/18/Lewis_Hamilton_2016_Malaysia_2.jpg"
            }
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Inovação"
              }
            }
          }
        }
      }
    },
    "PostList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "userId": {
            "type": "number",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Post do Ano"
          },
          "content": {
            "type": "string",
            "example": "Melhor post do ano"
          },
          "published": {
            "type": "string",
            "example": "2011-08-01T19:58:00.000Z"
          },
          "updated": {
            "type": "string",
            "example": "2011-08-01T19:58:51.000Z"
          },
          "user_id": {
            "type": "number",
            "example": 1
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "email": {
                "type": "string",
                "example": "lewishamilton@gmail.com"
              },
              "displayName": {
                "type": "string",
                "example": "Lewis Hamilton"
              },
              "image": {
                "type": "string",
                "example": "https://upload.wikimedia.org/wikipedia/commons/1/18/Lewis_Hamilton_2016_Malaysia_2.jpg"
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Inovação"
                }
              }
            }
          }
        }
      }
    },
    "ValidToken": {
      "type": "object",
      "properties": {
        "authorizathion": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiZGlzcGxheU5hbWUiOiJMZXdpcyBIYW1pbHRvbiIsImltYWdlIjoiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8xLzE4L0xld2lzX0hhbWlsdG9uXzIwMTZfTWFsYXlzaWFfMi5qcGcifSwiaWF0IjoxNjc3MTk4NTYxLCJleHAiOjI1NDExMTIxNjF9.se3YNe5wMW78JcwDYytPKfgaTRTGbYcO8e3Yk8fUWys"
        }
      }
    },
    "InvalidTokenError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Expired or invalid token"
        }
      }
    },
    "TokenNotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Token not found"
        }
      }
    },
    "UserDoesNotExistError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User does not exist"
        }
      }
    },
    "UserDeleteError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User delete error"
        }
      }
    },
    "UnauthorizedUserError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Unauthorized user"
        }
      }
    },
    "InvalidEmailError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User already registered"
        }
      }
    },
    "BodyNotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Some required fields are missing"
        }
      }
    },
    "InvalidFieldsBodyError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Invalid fields"
        }
      }
    },
    "PostDoesNotExistError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Post does not exist"
        }
      }
    },
    "CategoryNotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "one or more \"categoryIds\" not found"
        }
      }
    }
  }
}